@using Entities.Models
@using Contracts.Services
@using System.Security.Claims
@inject NavigationManager navMgr
@inject IPostService postService
@inject IUserService userService

<div class="container mt-3">
    <div class="row justify-content-center">
        <div class="col-10 col-xl-10 main box">
            <RadzenCard>
                <h4 class="mt-2">@Post?.Header</h4>
                <div class="col-12">
                    <p>@(new MarkupString(Post.Body))</p>
                </div>
                <div class="row">
                    <div class="d-flex">
                        <div class="d-flex">
                            <img class="m-1" src="img/9055695_bxs_upvote_icon.png" width="20" height="20" @onclick="UpVote" alt=""/>
                            <h3>@Post!.GetVoteValue()</h3>
                            <img class="m-1" src="img/9055470_bxs_downvote_icon.png" width="20" height="20" @onclick="DownVote" alt=""/>
                        </div>
                        <div class="col-3 d-flex" onclick="@(() => GoToPost(Post.PostId))">
                            <h3 class="oi oi-comment-square mt-1"></h3>
                            <h3 class="ml-1">@Post.Comments.Count</h3>
                        </div>
                    </div>
                    <div class="justify-content-end">
                        <h5>
                            <i>
                                Post By:
                            </i>
                            @Post.WrittenBy?.UserName
                        </h5>
                    </div>
                </div>
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    private ClaimsPrincipal? user;
    private bool isLoggedIn;
    private string errorLabel = string.Empty;

    [Parameter]
    public Post? Post { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        user = authState.User;
        isLoggedIn = user.Identity != null;
    }

    private async Task UpVote()
    {
        if (isLoggedIn)
        {
            Console.WriteLine("Up Vote");
            var currentUser = await userService.GetUserAsync(user.Identity.Name);
            try
            {
                postService.AddVote(new Vote(1, currentUser), Post.PostId);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        else
        {
            errorLabel = "Error: You must be logged in order to vote";
        }
    }

    private async Task DownVote()
    {
        if (isLoggedIn)
        {
            Console.WriteLine("Down Vote");
            var currentUser = await userService.GetUserAsync(user?.Identity?.Name);
            try
            {
                postService.AddVote(new Vote(-1, currentUser), Post?.PostId);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        else
        {
            errorLabel = "Error: You must be logged in order to vote";
        }
    }

    private void GoToPost(string? postId)
    {
        navMgr.NavigateTo($"/PostPage/{postId}");
    }

}